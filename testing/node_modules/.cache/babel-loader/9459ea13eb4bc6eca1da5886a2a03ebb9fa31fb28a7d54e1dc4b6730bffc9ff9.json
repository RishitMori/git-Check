{"ast":null,"code":"var helpers = require('../helpers');\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\nvar options = require('../constants/options');\nmodule.exports = function serialize(Immutable, refs, customReplacer, customReviver) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record) return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range) return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat) return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value)) return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value)) return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value)) return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value)) return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value)) return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value)) return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value)) return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n  function reviver(key, value) {\n    if (typeof value === 'object' && value !== null && '__serializedType__' in value) {\n      var data = value.data;\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n        case 'ImmutableList':\n          return Immutable.List(data);\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__] ? new refs[value.__serializedRef__](data) : Immutable.Map(data);\n        default:\n          return data;\n      }\n    }\n    return value;\n  }\n  return {\n    replacer: customReplacer ? function (key, value) {\n      return customReplacer(key, value, replacer);\n    } : replacer,\n    reviver: customReviver ? function (key, value) {\n      return customReviver(key, value, reviver);\n    } : reviver,\n    options: options\n  };\n};","map":{"version":3,"names":["helpers","require","mark","extract","refer","options","module","exports","serialize","Immutable","refs","customReplacer","customReviver","replacer","key","value","Record","Range","Repeat","OrderedMap","isOrderedMap","Map","isMap","List","isList","OrderedSet","isOrderedSet","Set","isSet","Seq","isSeq","Stack","isStack","reviver","data","__serializedType__","_start","_end","_step","_value","size","__serializedRef__"],"sources":["C:/Users/123/OneDrive/Desktop/git practice/git_destop/git-Check/testing/node_modules/remotedev-serialize/immutable/serialize.js"],"sourcesContent":["var helpers = require('../helpers');\nvar mark = helpers.mark;\nvar extract = helpers.extract;\nvar refer = helpers.refer;\nvar options = require('../constants/options');\n\nmodule.exports = function serialize(\n  Immutable,\n  refs,\n  customReplacer,\n  customReviver\n) {\n  function replacer(key, value) {\n    if (value instanceof Immutable.Record)\n      return refer(value, 'ImmutableRecord', 'toObject', refs);\n    if (value instanceof Immutable.Range)\n      return extract(value, 'ImmutableRange');\n    if (value instanceof Immutable.Repeat)\n      return extract(value, 'ImmutableRepeat');\n    if (Immutable.OrderedMap.isOrderedMap(value))\n      return mark(value, 'ImmutableOrderedMap', 'toObject');\n    if (Immutable.Map.isMap(value))\n      return mark(value, 'ImmutableMap', 'toObject');\n    if (Immutable.List.isList(value))\n      return mark(value, 'ImmutableList', 'toArray');\n    if (Immutable.OrderedSet.isOrderedSet(value))\n      return mark(value, 'ImmutableOrderedSet', 'toArray');\n    if (Immutable.Set.isSet(value))\n      return mark(value, 'ImmutableSet', 'toArray');\n    if (Immutable.Seq.isSeq(value))\n      return mark(value, 'ImmutableSeq', 'toArray');\n    if (Immutable.Stack.isStack(value))\n      return mark(value, 'ImmutableStack', 'toArray');\n    return value;\n  }\n\n  function reviver(key, value) {\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      '__serializedType__' in value\n    ) {\n      var data = value.data;\n      switch (value.__serializedType__) {\n        case 'ImmutableMap':\n          return Immutable.Map(data);\n        case 'ImmutableOrderedMap':\n          return Immutable.OrderedMap(data);\n        case 'ImmutableList':\n          return Immutable.List(data);\n        case 'ImmutableRange':\n          return Immutable.Range(data._start, data._end, data._step);\n        case 'ImmutableRepeat':\n          return Immutable.Repeat(data._value, data.size);\n        case 'ImmutableSet':\n          return Immutable.Set(data);\n        case 'ImmutableOrderedSet':\n          return Immutable.OrderedSet(data);\n        case 'ImmutableSeq':\n          return Immutable.Seq(data);\n        case 'ImmutableStack':\n          return Immutable.Stack(data);\n        case 'ImmutableRecord':\n          return refs && refs[value.__serializedRef__]\n            ? new refs[value.__serializedRef__](data)\n            : Immutable.Map(data);\n        default:\n          return data;\n      }\n    }\n    return value;\n  }\n\n  return {\n    replacer: customReplacer\n      ? function (key, value) {\n          return customReplacer(key, value, replacer);\n        }\n      : replacer,\n    reviver: customReviver\n      ? function (key, value) {\n          return customReviver(key, value, reviver);\n        }\n      : reviver,\n    options: options,\n  };\n};\n"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIC,IAAI,GAAGF,OAAO,CAACE,IAAI;AACvB,IAAIC,OAAO,GAAGH,OAAO,CAACG,OAAO;AAC7B,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK;AACzB,IAAIC,OAAO,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AAE7CK,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CACjCC,SAAS,EACTC,IAAI,EACJC,cAAc,EACdC,aAAa,EACb;EACA,SAASC,QAAQA,CAACC,GAAG,EAAEC,KAAK,EAAE;IAC5B,IAAIA,KAAK,YAAYN,SAAS,CAACO,MAAM,EACnC,OAAOZ,KAAK,CAACW,KAAK,EAAE,iBAAiB,EAAE,UAAU,EAAEL,IAAI,CAAC;IAC1D,IAAIK,KAAK,YAAYN,SAAS,CAACQ,KAAK,EAClC,OAAOd,OAAO,CAACY,KAAK,EAAE,gBAAgB,CAAC;IACzC,IAAIA,KAAK,YAAYN,SAAS,CAACS,MAAM,EACnC,OAAOf,OAAO,CAACY,KAAK,EAAE,iBAAiB,CAAC;IAC1C,IAAIN,SAAS,CAACU,UAAU,CAACC,YAAY,CAACL,KAAK,CAAC,EAC1C,OAAOb,IAAI,CAACa,KAAK,EAAE,qBAAqB,EAAE,UAAU,CAAC;IACvD,IAAIN,SAAS,CAACY,GAAG,CAACC,KAAK,CAACP,KAAK,CAAC,EAC5B,OAAOb,IAAI,CAACa,KAAK,EAAE,cAAc,EAAE,UAAU,CAAC;IAChD,IAAIN,SAAS,CAACc,IAAI,CAACC,MAAM,CAACT,KAAK,CAAC,EAC9B,OAAOb,IAAI,CAACa,KAAK,EAAE,eAAe,EAAE,SAAS,CAAC;IAChD,IAAIN,SAAS,CAACgB,UAAU,CAACC,YAAY,CAACX,KAAK,CAAC,EAC1C,OAAOb,IAAI,CAACa,KAAK,EAAE,qBAAqB,EAAE,SAAS,CAAC;IACtD,IAAIN,SAAS,CAACkB,GAAG,CAACC,KAAK,CAACb,KAAK,CAAC,EAC5B,OAAOb,IAAI,CAACa,KAAK,EAAE,cAAc,EAAE,SAAS,CAAC;IAC/C,IAAIN,SAAS,CAACoB,GAAG,CAACC,KAAK,CAACf,KAAK,CAAC,EAC5B,OAAOb,IAAI,CAACa,KAAK,EAAE,cAAc,EAAE,SAAS,CAAC;IAC/C,IAAIN,SAAS,CAACsB,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,EAChC,OAAOb,IAAI,CAACa,KAAK,EAAE,gBAAgB,EAAE,SAAS,CAAC;IACjD,OAAOA,KAAK;EACd;EAEA,SAASkB,OAAOA,CAACnB,GAAG,EAAEC,KAAK,EAAE;IAC3B,IACE,OAAOA,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACd,oBAAoB,IAAIA,KAAK,EAC7B;MACA,IAAImB,IAAI,GAAGnB,KAAK,CAACmB,IAAI;MACrB,QAAQnB,KAAK,CAACoB,kBAAkB;QAC9B,KAAK,cAAc;UACjB,OAAO1B,SAAS,CAACY,GAAG,CAACa,IAAI,CAAC;QAC5B,KAAK,qBAAqB;UACxB,OAAOzB,SAAS,CAACU,UAAU,CAACe,IAAI,CAAC;QACnC,KAAK,eAAe;UAClB,OAAOzB,SAAS,CAACc,IAAI,CAACW,IAAI,CAAC;QAC7B,KAAK,gBAAgB;UACnB,OAAOzB,SAAS,CAACQ,KAAK,CAACiB,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,KAAK,CAAC;QAC5D,KAAK,iBAAiB;UACpB,OAAO7B,SAAS,CAACS,MAAM,CAACgB,IAAI,CAACK,MAAM,EAAEL,IAAI,CAACM,IAAI,CAAC;QACjD,KAAK,cAAc;UACjB,OAAO/B,SAAS,CAACkB,GAAG,CAACO,IAAI,CAAC;QAC5B,KAAK,qBAAqB;UACxB,OAAOzB,SAAS,CAACgB,UAAU,CAACS,IAAI,CAAC;QACnC,KAAK,cAAc;UACjB,OAAOzB,SAAS,CAACoB,GAAG,CAACK,IAAI,CAAC;QAC5B,KAAK,gBAAgB;UACnB,OAAOzB,SAAS,CAACsB,KAAK,CAACG,IAAI,CAAC;QAC9B,KAAK,iBAAiB;UACpB,OAAOxB,IAAI,IAAIA,IAAI,CAACK,KAAK,CAAC0B,iBAAiB,CAAC,GACxC,IAAI/B,IAAI,CAACK,KAAK,CAAC0B,iBAAiB,CAAC,CAACP,IAAI,CAAC,GACvCzB,SAAS,CAACY,GAAG,CAACa,IAAI,CAAC;QACzB;UACE,OAAOA,IAAI;MACf;IACF;IACA,OAAOnB,KAAK;EACd;EAEA,OAAO;IACLF,QAAQ,EAAEF,cAAc,GACpB,UAAUG,GAAG,EAAEC,KAAK,EAAE;MACpB,OAAOJ,cAAc,CAACG,GAAG,EAAEC,KAAK,EAAEF,QAAQ,CAAC;IAC7C,CAAC,GACDA,QAAQ;IACZoB,OAAO,EAAErB,aAAa,GAClB,UAAUE,GAAG,EAAEC,KAAK,EAAE;MACpB,OAAOH,aAAa,CAACE,GAAG,EAAEC,KAAK,EAAEkB,OAAO,CAAC;IAC3C,CAAC,GACDA,OAAO;IACX5B,OAAO,EAAEA;EACX,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}