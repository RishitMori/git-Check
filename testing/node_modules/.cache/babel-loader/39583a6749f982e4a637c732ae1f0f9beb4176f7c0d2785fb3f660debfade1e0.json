{"ast":null,"code":"'use strict';\n\n/*\n * It only for Debug Remotely mode for Android\n * When __DEV__ === false, we can't use window.require('NativeModules')\n */\nfunction getByRemoteConfig(hostname) {\n  var remoteModuleConfig = typeof window !== 'undefined' && window.__fbBatchedBridgeConfig && window.__fbBatchedBridgeConfig.remoteModuleConfig;\n  if (!Array.isArray(remoteModuleConfig) || hostname !== 'localhost' && hostname !== '127.0.0.1') return {\n    hostname: hostname,\n    passed: false\n  };\n  var result = hostname;\n  var passed = false;\n  remoteModuleConfig.some(function (config) {\n    if (!config) return false;\n    var name = config[0];\n    var content = config[1];\n    if ((name === 'AndroidConstants' || name === 'PlatformConstants') && content && content.ServerHost) {\n      result = content.ServerHost.split(':')[0];\n      passed = true;\n      return true;\n    }\n    if (name === 'SourceCode' && content && content.scriptURL) {\n      result = content.scriptURL.replace(/https?:\\/\\//, '').split(':')[0];\n      passed = true;\n      return true;\n    }\n    return false;\n  });\n  return {\n    hostname: result,\n    passed: passed\n  };\n}\nfunction getByRNRequirePolyfill(hostname) {\n  var originalWarn = console.warn;\n  var NativeModules;\n  var Constants;\n  var SourceCode;\n  if (typeof window === 'undefined' || !window.__DEV__ || typeof window.require !== 'function' ||\n  // RN >= 0.56\n  // TODO: Get NativeModules for RN >= 0.56\n  window.require.name === 'metroRequire') {\n    return hostname;\n  }\n  console.warn = function () {\n    if (arguments[0] && typeof arguments[0].indexOf == 'function' && arguments[0].indexOf(\"Requiring module 'NativeModules' by name\") > -1) return;\n    return originalWarn.apply(console, arguments);\n  };\n  try {\n    NativeModules = window.require('NativeModules');\n  } catch (e) {}\n  console.warn = originalWarn;\n  if (!NativeModules) return hostname;\n  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants;\n  SourceCode = NativeModules.SourceCode;\n  if (Constants && Constants.ServerHost) {\n    return Constants.ServerHost.split(':')[0];\n  } else if (SourceCode && SourceCode.scriptURL) {\n    return SourceCode.scriptURL.replace(/https?:\\/\\//, '').split(':')[0];\n  }\n  return hostname;\n}\n\n/*\n * Get React Native server IP if hostname is `localhost`\n * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)\n */\nmodule.exports = function (hostname) {\n  // Check if it in React Native environment\n  if (typeof __fbBatchedBridgeConfig !== 'object' || hostname !== 'localhost' && hostname !== '127.0.0.1') {\n    return hostname;\n  }\n  var result = getByRemoteConfig(hostname);\n\n  // Leave if get hostname by remote config successful\n  if (result.passed) {\n    return result.hostname;\n  }\n\n  // Otherwise, use RN's require polyfill\n  return getByRNRequirePolyfill(hostname);\n};","map":{"version":3,"names":["getByRemoteConfig","hostname","remoteModuleConfig","window","__fbBatchedBridgeConfig","Array","isArray","passed","result","some","config","name","content","ServerHost","split","scriptURL","replace","getByRNRequirePolyfill","originalWarn","console","warn","NativeModules","Constants","SourceCode","__DEV__","require","arguments","indexOf","apply","e","PlatformConstants","AndroidConstants","module","exports"],"sources":["C:/Users/123/OneDrive/Desktop/git practice/git_destop/git-Check/testing/node_modules/rn-host-detect/index.js"],"sourcesContent":["'use strict'\n\n/*\n * It only for Debug Remotely mode for Android\n * When __DEV__ === false, we can't use window.require('NativeModules')\n */\nfunction getByRemoteConfig(hostname) {\n  var remoteModuleConfig = typeof window !== 'undefined' &&\n    window.__fbBatchedBridgeConfig &&\n    window.__fbBatchedBridgeConfig.remoteModuleConfig\n\n  if (\n    !Array.isArray(remoteModuleConfig) ||\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) return { hostname: hostname, passed: false }\n\n  var result = hostname\n  var passed = false\n  remoteModuleConfig.some(function (config) {\n    if (!config) return false\n    \n    var name = config[0]\n    var content = config[1]\n    if (\n      (name === 'AndroidConstants' || name === 'PlatformConstants') &&\n      content &&\n      content.ServerHost\n    ) {\n      result = content.ServerHost.split(':')[0]\n      passed = true\n      return true\n    }\n\n    if (\n      name === 'SourceCode' &&\n      content &&\n      content.scriptURL\n    ) {\n      result = content.scriptURL.replace(/https?:\\/\\//, '').split(':')[0]\n      passed = true\n      return true\n    }\n    return false\n  })\n\n  return { hostname: result, passed: passed }\n}\n\nfunction getByRNRequirePolyfill(hostname) {\n  var originalWarn = console.warn\n  var NativeModules\n  var Constants\n  var SourceCode\n  if (\n    typeof window === 'undefined' ||\n    !window.__DEV__ ||\n    typeof window.require !== 'function' ||\n    // RN >= 0.56\n    // TODO: Get NativeModules for RN >= 0.56\n    window.require.name === 'metroRequire'\n  ) {\n    return hostname\n  }\n  console.warn = function() {\n    if (\n      arguments[0] &&\n      typeof arguments[0].indexOf == 'function' &&\n      arguments[0].indexOf(\"Requiring module 'NativeModules' by name\") > -1\n    )\n      return\n    return originalWarn.apply(console, arguments)\n  }\n  try {\n    NativeModules = window.require('NativeModules')\n  } catch (e) {}\n  console.warn = originalWarn\n  if (!NativeModules) return hostname\n\n  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants\n  SourceCode = NativeModules.SourceCode\n\n  if (Constants && Constants.ServerHost) {\n    return Constants.ServerHost.split(':')[0]\n  } else if (SourceCode && SourceCode.scriptURL) {\n    return SourceCode.scriptURL.replace(/https?:\\/\\//, '').split(':')[0]\n  }\n  return hostname\n}\n\n/*\n * Get React Native server IP if hostname is `localhost`\n * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)\n */\nmodule.exports = function (hostname) {\n  // Check if it in React Native environment\n  if (\n    typeof __fbBatchedBridgeConfig !== 'object' ||\n    hostname !== 'localhost' && hostname !== '127.0.0.1'\n  ) {\n    return hostname\n  }\n  var result = getByRemoteConfig(hostname)\n\n  // Leave if get hostname by remote config successful\n  if (result.passed) {\n    return result.hostname\n  }\n\n  // Otherwise, use RN's require polyfill\n  return getByRNRequirePolyfill(hostname)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}