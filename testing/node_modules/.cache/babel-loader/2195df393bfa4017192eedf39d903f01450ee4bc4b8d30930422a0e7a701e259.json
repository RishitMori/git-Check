{"ast":null,"code":"var SCClientSocket = require('./scclientsocket');\nvar scErrors = require('sc-errors');\nvar uuid = require('uuid');\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\nvar _clients = {};\nfunction getMultiplexId(options) {\n  var protocolPrefix = options.secure ? 'https://' : 'http://';\n  var queryString = '';\n  if (options.query) {\n    if (typeof options.query === 'string') {\n      queryString = options.query;\n    } else {\n      var queryArray = [];\n      var queryMap = options.query;\n      for (var key in queryMap) {\n        if (queryMap.hasOwnProperty(key)) {\n          queryArray.push(key + '=' + queryMap[key]);\n        }\n      }\n      if (queryArray.length) {\n        queryString = '?' + queryArray.join('&');\n      }\n    }\n  }\n  var host;\n  if (options.host) {\n    host = options.host;\n  } else {\n    host = options.hostname + ':' + options.port;\n  }\n  return protocolPrefix + host + options.path + queryString;\n}\nfunction isUrlSecure() {\n  return global.location && location.protocol === 'https:';\n}\nfunction getPort(options, isSecureDefault) {\n  var isSecure = options.secure == null ? isSecureDefault : options.secure;\n  return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);\n}\nfunction create(options) {\n  var self = this;\n  options = options || {};\n  if (options.host && !options.host.match(/[^:]+:\\d{2,5}/)) {\n    throw new InvalidArgumentsError('The host option should include both' + ' the hostname and the port number in the format \"hostname:port\"');\n  }\n  if (options.host && options.hostname) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format \"hostname:port\"' + ' - Because of this, you should never use host and hostname options together');\n  }\n  if (options.host && options.port) {\n    throw new InvalidArgumentsError('The host option should already include' + ' the hostname and the port number in the format \"hostname:port\"' + ' - Because of this, you should never use host and port options together');\n  }\n  var isSecureDefault = isUrlSecure();\n  var opts = {\n    port: getPort(options, isSecureDefault),\n    hostname: global.location && location.hostname || 'localhost',\n    path: '/socketcluster/',\n    secure: isSecureDefault,\n    autoConnect: true,\n    autoReconnect: true,\n    autoSubscribeOnConnect: true,\n    connectTimeout: 20000,\n    ackTimeout: 10000,\n    timestampRequests: false,\n    timestampParam: 't',\n    authEngine: null,\n    authTokenName: 'socketCluster.authToken',\n    binaryType: 'arraybuffer',\n    multiplex: true,\n    pubSubBatchDuration: null,\n    cloneData: false\n  };\n  for (var i in options) {\n    if (options.hasOwnProperty(i)) {\n      opts[i] = options[i];\n    }\n  }\n  opts.clientMap = _clients;\n  if (opts.multiplex === false) {\n    opts.clientId = uuid.v4();\n    var socket = new SCClientSocket(opts);\n    _clients[opts.clientId] = socket;\n    return socket;\n  }\n  opts.clientId = getMultiplexId(opts);\n  if (_clients[opts.clientId]) {\n    if (opts.autoConnect) {\n      _clients[opts.clientId].connect();\n    }\n  } else {\n    _clients[opts.clientId] = new SCClientSocket(opts);\n  }\n  return _clients[opts.clientId];\n}\nfunction destroy(socket) {\n  socket.destroy();\n}\nmodule.exports = {\n  create: create,\n  destroy: destroy,\n  clients: _clients\n};","map":{"version":3,"names":["SCClientSocket","require","scErrors","uuid","InvalidArgumentsError","_clients","getMultiplexId","options","protocolPrefix","secure","queryString","query","queryArray","queryMap","key","hasOwnProperty","push","length","join","host","hostname","port","path","isUrlSecure","global","location","protocol","getPort","isSecureDefault","isSecure","create","self","match","opts","autoConnect","autoReconnect","autoSubscribeOnConnect","connectTimeout","ackTimeout","timestampRequests","timestampParam","authEngine","authTokenName","binaryType","multiplex","pubSubBatchDuration","cloneData","i","clientMap","clientId","v4","socket","connect","destroy","module","exports","clients"],"sources":["C:/Users/123/OneDrive/Desktop/git practice/git_destop/git-Check/testing/node_modules/socketcluster-client/lib/factory.js"],"sourcesContent":["var SCClientSocket = require('./scclientsocket');\nvar scErrors = require('sc-errors');\nvar uuid = require('uuid');\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\n\nvar _clients = {};\n\nfunction getMultiplexId(options) {\n  var protocolPrefix = options.secure ? 'https://' : 'http://';\n  var queryString = '';\n  if (options.query) {\n    if (typeof options.query === 'string') {\n      queryString = options.query;\n    } else {\n      var queryArray = [];\n      var queryMap = options.query;\n      for (var key in queryMap) {\n        if (queryMap.hasOwnProperty(key)) {\n          queryArray.push(key + '=' + queryMap[key]);\n        }\n      }\n      if (queryArray.length) {\n        queryString = '?' + queryArray.join('&');\n      }\n    }\n  }\n  var host;\n  if (options.host) {\n    host = options.host;\n  } else {\n    host = options.hostname + ':' + options.port;\n  }\n  return protocolPrefix + host + options.path + queryString;\n}\n\nfunction isUrlSecure() {\n  return global.location && location.protocol === 'https:';\n}\n\nfunction getPort(options, isSecureDefault) {\n  var isSecure = options.secure == null ? isSecureDefault : options.secure;\n  return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);\n}\n\nfunction create(options) {\n  var self = this;\n\n  options = options || {};\n\n  if (options.host && !options.host.match(/[^:]+:\\d{2,5}/)) {\n    throw new InvalidArgumentsError('The host option should include both' +\n      ' the hostname and the port number in the format \"hostname:port\"');\n  }\n\n  if (options.host && options.hostname) {\n    throw new InvalidArgumentsError('The host option should already include' +\n      ' the hostname and the port number in the format \"hostname:port\"' +\n      ' - Because of this, you should never use host and hostname options together');\n  }\n\n  if (options.host && options.port) {\n    throw new InvalidArgumentsError('The host option should already include' +\n      ' the hostname and the port number in the format \"hostname:port\"' +\n      ' - Because of this, you should never use host and port options together');\n  }\n\n  var isSecureDefault = isUrlSecure();\n\n  var opts = {\n    port: getPort(options, isSecureDefault),\n    hostname: global.location && location.hostname || 'localhost',\n    path: '/socketcluster/',\n    secure: isSecureDefault,\n    autoConnect: true,\n    autoReconnect: true,\n    autoSubscribeOnConnect: true,\n    connectTimeout: 20000,\n    ackTimeout: 10000,\n    timestampRequests: false,\n    timestampParam: 't',\n    authEngine: null,\n    authTokenName: 'socketCluster.authToken',\n    binaryType: 'arraybuffer',\n    multiplex: true,\n    pubSubBatchDuration: null,\n    cloneData: false\n  };\n  for (var i in options) {\n    if (options.hasOwnProperty(i)) {\n      opts[i] = options[i];\n    }\n  }\n  opts.clientMap = _clients;\n\n  if (opts.multiplex === false) {\n    opts.clientId = uuid.v4();\n    var socket = new SCClientSocket(opts);\n    _clients[opts.clientId] = socket;\n    return socket;\n  }\n  opts.clientId = getMultiplexId(opts);\n\n  if (_clients[opts.clientId]) {\n    if (opts.autoConnect) {\n      _clients[opts.clientId].connect();\n    }\n  } else {\n    _clients[opts.clientId] = new SCClientSocket(opts);\n  }\n  return _clients[opts.clientId];\n}\n\nfunction destroy(socket) {\n  socket.destroy();\n}\n\nmodule.exports = {\n  create: create,\n  destroy: destroy,\n  clients: _clients\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}